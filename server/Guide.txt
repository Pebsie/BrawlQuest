==SERVER DOCUMENTATION==
=PLAYERS=
newPlayer(name, password) - Creates a new ACCOUNT and player. Returns nothing.
getPlayerID(name) - Returns account table ID of player username.
getPlayerName(id) - Returns player username of account table ID.
loginPlayer(name, password) - Checks name and password of account. Returns a boolean.
givePlayerXP(name, xp) - Gives player name XP equal to xp. Player levels up if above cap, set by data/level.lua
givePlayerGold(name, gold) - Gives player name gold equal to gold
givePlayerItem(name, item, amount) - Gives player name item item. Amount is an optional parameter and defaults to 1.
damagePlayer(name, amount) - Damage player name by amount amount. Lower cap is 0.

=FIGHT=
newFight(tile, fscript) - Starts a fight on tile using fscript.
addPlayerToFight(fight, name) - Adds player name to fight fight.
listFightsOnTile(tile) - Returns an array with all fights taking place on that tile in format id;first player;time elapsed;
listPlayersInFight(fight) - Returns an array of all player IDs currently in this fight

updateFights(dt)
  This gets its own section because I need to explain a bit more about its behaviour.
  We cycle through all fights.
  Mobs are broken down and assigned into the "mob" array.
  Mobs then move towards their target at the speed set in data/mobs
  If their target isn't a static point then their target x and y is updated to the player they've got targeted
  

==MODULE VARIABLES==
pl - Player
acc - Account
lvlXP - Level XP boundary
mb - Mob (directory)
ft - Fight
fs - Fight script

==EXPANSION INFORMATION==
To add multiple character slots, add "other names" to acc. Many other systems RELY on acc.username.
